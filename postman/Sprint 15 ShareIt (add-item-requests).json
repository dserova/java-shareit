{
	"info": {
		"_postman_id": "acc2017f-6a14-40c2-b0d7-7fc12d8597fc",
		"name": "Sprint 15 ShareIt (add-item-requests)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28341999"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "User 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 1 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 2 create fail duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 2 create fail duplicate email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"409 CONFLICT\",\n    \"error\": \"Request error\"\n}"
						}
					]
				},
				{
					"name": "User create fail no email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create fail no email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:15 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"email is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "User create fail invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create fail invalid email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:18 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"code\": \"400 BAD_REQUEST\",\n            \"error\": \"email - must be a well-formed email address\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "User 1 update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"update@user.com\"').to.eql('update@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"update\"').to.eql('update');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"update\",\n    \"email\": \"update@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 update",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"update\",\n    \"email\": \"update@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:22 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"update\",\n    \"email\": \"update@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 3 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 3 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 1 update name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"update@user.com\"').to.eql('update@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"updateName\"').to.eql('updateName');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"updateName\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 update name",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"updateName\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"updateName\",\n    \"email\": \"update@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 1 update email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"updateName@user.com\"').to.eql('updateName@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"updateName\"').to.eql('updateName');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"updateName@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 update email",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"updateName@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"updateName\",\n    \"email\": \"updateName@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 1 update with same email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"updateName@user.com\"').to.eql('updateName@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"updateName\"').to.eql('updateName');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"updateName@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 update with same email",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"updateName@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"updateName\",\n    \"email\": \"updateName@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 1 name update fail email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 500]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 name update fail email exists",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"user@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"409 CONFLICT\",\n    \"error\": \"Request error\"\n}"
						}
					]
				},
				{
					"name": "User 1 get updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"updateName@user.com\"').to.eql('updateName@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"updateName\"').to.eql('updateName');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 1 get updated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"updateName\",\n    \"email\": \"updateName@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 3 get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 3 get",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:44 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						}
					]
				},
				{
					"name": "User 100 get unkonwn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "100"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 100 get unkonwn",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "100"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "User 3 delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": [
						{
							"name": "User 3 delete",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "User 4 create after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 4 create after delete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
						}
					]
				},
				{
					"name": "User get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test user[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user[0] 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('email');",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"updateName@user.com\"').to.eql('updateName@user.com');",
									"});",
									"pm.test(\"Test user[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"updateName\"').to.eql('updateName');",
									"});",
									"",
									"pm.test(\"Test user[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test user[1] 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('email');",
									"    pm.expect(jsonData[1].email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
									"});",
									"pm.test(\"Test user[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"user\"').to.eql('user');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User get all",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:43:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"user\",\n        \"email\": \"user@user.com\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "items",
			"item": [
				{
					"name": "Item 1 create by user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Дрель\"').to.eql('Дрель');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Простая дрель\"').to.eql('Простая дрель');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item 1 create by user 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item create without X-Sharer-User-Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item create without X-Sharer-User-Id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:15 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Required request header 'X-Sharer-User-Id' for method parameter type long is not present\"\n}"
						}
					]
				},
				{
					"name": "Item create with not found user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404,403]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "10",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item create with not found user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "10",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Item create without available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item create without available",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "3",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:24 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"available is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "Item create with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item create with empty name",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "3",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:27 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"code\": \"400 BAD_REQUEST\",\n            \"error\": \"name - must not be blank\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Item create with empty description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Отвертка\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item create with empty description",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "3",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Отвертка\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:29 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"description is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "item 1 update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Дрель+\"').to.eql('Дрель+');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"false\"').to.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"name\": \"Дрель+\",\n    \"description\": \"Аккумуляторная дрель\",\n    \"available\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"name\": \"Дрель+\",\n    \"description\": \"Аккумуляторная дрель\",\n    \"available\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Дрель+\",\n    \"description\": \"Аккумуляторная дрель\",\n    \"available\": false\n}"
						}
					]
				},
				{
					"name": "item 1 update without  X-Sharer-User-Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update without  X-Sharer-User-Id",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:35 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Required request header 'X-Sharer-User-Id' for method parameter type long is not present\"\n}"
						}
					]
				},
				{
					"name": "item 1 update with other user 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404, 403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update with other user 3",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "3",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Дрель\",\n    \"description\": \"Простая дрель\",\n    \"available\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:38 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Item not found\"\n}"
						}
					]
				},
				{
					"name": "item 1 update available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Дрель+\"').to.eql('Дрель+');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update available",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:41 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Дрель+\",\n    \"description\": \"Аккумуляторная дрель\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "item 1 update description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Дрель+\"').to.eql('Дрель+');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"description\": \"Аккумуляторная дрель + аккумулятор\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update description",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"description\": \"Аккумуляторная дрель + аккумулятор\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:44 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Дрель+\",\n    \"description\": \"Аккумуляторная дрель + аккумулятор\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "item 1 update name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Аккумуляторная дрель\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 1 update name",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\": \"Аккумуляторная дрель\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Аккумуляторная дрель\",\n    \"description\": \"Аккумуляторная дрель + аккумулятор\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item 1 get from owner user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 1 get from owner user 1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Аккумуляторная дрель\",\n    \"description\": \"Аккумуляторная дрель + аккумулятор\",\n    \"available\": true,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item 1 get from user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Test get item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);",
									"    pm.expect(jsonData.name, '\"name\" field').to.eql('Аккумуляторная дрель');",
									"    pm.expect(jsonData.description, '\"description\" field').to.eql('Аккумуляторная дрель + аккумулятор');",
									"    pm.expect(jsonData.available, '\"available\" field').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 1 get from user 4",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:44:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Аккумуляторная дрель\",\n    \"description\": \"Аккумуляторная дрель + аккумулятор\",\n    \"available\": true,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item 100 get from user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "100"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 100 get from user 4",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "100"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Item not found\"\n}"
						}
					]
				},
				{
					"name": "Item 2 create  by user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item 2 create  by user 4",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item 3 create by user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Тюбик суперклея марки Момент\"').to.eql('Тюбик суперклея марки Момент');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Клей Момент\",\n    \"description\": \"Тюбик суперклея марки Момент\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item 3 create by user 4",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Клей Момент\",\n    \"description\": \"Тюбик суперклея марки Момент\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"name\": \"Клей Момент\",\n    \"description\": \"Тюбик суперклея марки Момент\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item get all user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item get all user 1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true,\n        \"comments\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Item get all user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"",
									"pm.test(\"Test item[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test item[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									"pm.test(\"Test item[1] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('description');",
									"    pm.expect(jsonData[1].description, '\"description\" must be \"Тюбик суперклея марки Момент\"').to.eql('Тюбик суперклея марки Момент');",
									"});",
									"pm.test(\"Test item[1] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('available');",
									"    pm.expect(jsonData[1].available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item get all user 4",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true,\n        \"comments\": []\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Клей Момент\",\n        \"description\": \"Тюбик суперклея марки Момент\",\n        \"available\": true,\n        \"comments\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Item search аккумуляторная",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item[1] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('description');",
									"    pm.expect(jsonData[1].description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item[1] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('available');",
									"    pm.expect(jsonData[1].available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=аккУМУляторная",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "аккУМУляторная"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item search аккумуляторная",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/search?text=аккУМУляторная",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "аккУМУляторная"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    }\n]"
						}
					]
				},
				{
					"name": "item 2 update set unavailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"false\"').to.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 2 update set unavailable",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": false\n}"
						}
					]
				},
				{
					"name": "Item search дрель",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test search item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=дРелЬ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "дРелЬ"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item search дрель",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/search?text=дРелЬ",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "дРелЬ"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    }\n]"
						}
					]
				},
				{
					"name": "Item search аккумуляторная available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test search item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=аккУМУляторная",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "аккУМУляторная"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item search аккумуляторная available",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/search?text=аккУМУляторная",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "аккУМУляторная"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:28 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    }\n]"
						}
					]
				},
				{
					"name": "item 2 update set available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 2 update set available",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:31 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item search отвертка",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test search item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=оТверТ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "оТверТ"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item search отвертка",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/search?text=оТверТ",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "оТверТ"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    }\n]"
						}
					]
				},
				{
					"name": "Item search empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test search item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Item search empty",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/search?text=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:38 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				}
			]
		},
		{
			"name": "bookings",
			"item": [
				{
					"name": "item 2 update set unavailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"false\"').to.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 2 update set unavailable",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": false\n}"
						}
					]
				},
				{
					"name": "Booking create from user1 to item2 unavailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(2, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create from user1 to item2 unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:52 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "item 2 update set available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "item 2 update set available",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:45:59 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Booking create failed by wrong userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404, 403]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(2, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "100",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by wrong userId",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "100",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:04 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by not found itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(2, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 200,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by not found itemId",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 200,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Item not found\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by end in past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(-1, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by end in past",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:12 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by end before start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"var end = moment().add(1, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by end before start",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:17 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by start equal end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"pm.environment.set('start_equal_end', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start_equal_end}}\",\n    \"end\": \"{{start_equal_end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by start equal end",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start_equal_end}}\",\n    \"end\": \"{{start_equal_end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:21 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by start equal null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"pm.environment.set('start_null', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"end\": \"{{start_null}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by start equal null",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"end\": \"{{start_null}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:25 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"start is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by end equal null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"pm.environment.set('end_null', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{end_null}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by end equal null",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{end_null}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:30 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"end is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "Booking create failed by start in past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(-1, 'd');\r",
									"var end = moment().add(1, 'd');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create failed by start in past",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:35 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking 1 create from user 1 to item 2 current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(3, 's');\r",
									"var end = moment().add(4, 's')\r",
									"pm.environment.set('start', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 1 create from user 1 to item 2 current",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T14:46:42\",\n    \"end\": \"2023-08-03T14:46:43\"\n}"
						}
					]
				},
				{
					"name": "Booking set approve by owner current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking patch response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking set approve by owner current",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:44 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T14:46:42\",\n    \"end\": \"2023-08-03T14:46:43\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 create from user 1 to item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(2, 'd');\r",
									"pm.environment.set('start2', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end2', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start2}}\",\n    \"end\": \"{{end2}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 create from user 1 to item 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start2}}\",\n    \"end\": \"{{end2}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-04T14:46:51\",\n    \"end\": \"2023-08-05T14:46:51\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 get by user 1 (booker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking get response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 get by user 1 (booker)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:46:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-04T14:46:51\",\n    \"end\": \"2023-08-05T14:46:51\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 get by user 4 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking get response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 get by user 4 (owner)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:47:04 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-04T14:46:51\",\n    \"end\": \"2023-08-05T14:46:51\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for wrong user 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,404,403]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "100",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								""
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for wrong user 100",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "100",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:47:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for wrong owner user 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,404,403]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "100",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for wrong owner user 100",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "100",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:47:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:47:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T14:46:51\",\n        \"end\": \"2023-08-05T14:46:51\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T14:46:42\",\n        \"end\": \"2023-08-03T14:46:43\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by ALL state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=ALL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "ALL"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by ALL state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=ALL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "ALL"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 07:47:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T14:46:51\",\n        \"end\": \"2023-08-05T14:46:51\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T14:46:42\",\n        \"end\": \"2023-08-03T14:46:43\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by FUTURE state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(new Date(jsonData[0].start), '\"start\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(new Date(jsonData[0].end), '\"end\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(new Date(jsonData[1].start), '\"start\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(new Date(jsonData[1].end), '\"end\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=FUTURE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "FUTURE"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by FUTURE state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=FUTURE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "FUTURE"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T15:27:04\",\n        \"end\": \"2023-08-05T15:27:04\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:27:07\",\n        \"end\": \"2023-08-03T15:27:08\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by wrong state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});",
									"pm.test(\"Test get user bookings by 'UNSUPPORTED_STATUS' state\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error, 'Error message').to.be.eql('Unknown state: UNSUPPORTED_STATUS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=UNSUPPORTED_STATUS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "UNSUPPORTED_STATUS"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by wrong state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=UNSUPPORTED_STATUS",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "UNSUPPORTED_STATUS"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:22 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Unknown state: UNSUPPORTED_STATUS\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for owner",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:26 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T15:16:06\",\n        \"end\": \"2023-08-05T15:16:06\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:16:05\",\n        \"end\": \"2023-08-03T15:16:06\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for owner by ALL state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=ALL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "ALL"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for owner by ALL state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=ALL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "ALL"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T15:16:06\",\n        \"end\": \"2023-08-05T15:16:06\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:16:05\",\n        \"end\": \"2023-08-03T15:16:06\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for owner by FUTURE state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(new Date(jsonData[0].start), '\"start\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(new Date(jsonData[0].end), '\"end\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(new Date(jsonData[1].start), '\"start\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"",
									"});",
									"pm.test(\"Test booking[1] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(new Date(jsonData[1].end), '\"end\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[1] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=FUTURE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "FUTURE"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for owner by FUTURE state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=FUTURE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "FUTURE"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-04T15:27:04\",\n        \"end\": \"2023-08-05T15:27:04\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:27:07\",\n        \"end\": \"2023-08-03T15:27:08\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for owner by wrong state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});",
									"pm.test(\"Test get owner bookings by 'UNSUPPORTED_STATUS' state\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error, 'Error message').to.be.eql('Unknown state: UNSUPPORTED_STATUS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=UNSUPPORTED_STATUS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "UNSUPPORTED_STATUS"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for owner by wrong state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=UNSUPPORTED_STATUS",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "UNSUPPORTED_STATUS"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:38 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Unknown state: UNSUPPORTED_STATUS\"\n}"
						}
					]
				},
				{
					"name": "Booking 1000 get from user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "1000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 1000 get from user 4",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "1000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:41 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Booking not found\"\n}"
						}
					]
				},
				{
					"name": "User 5 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"other@other.com\"').to.eql('other@other.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"other\"').to.eql('other');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"other\",\n    \"email\": \"other@other.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 5 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"other\",\n    \"email\": \"other@other.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:45 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"name\": \"other\",\n    \"email\": \"other@other.com\"\n}"
						}
					]
				},
				{
					"name": "Booking 1 get from user 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 1 get from user 5",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "1"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Booking not found\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 change status from user 5 fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 change status from user 5 fail",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:53 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 change status by user 1 (booker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 change status by user 1 (booker)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:16:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 set approve by user 4 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking get response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start2') + '\"').to.eql(pm.environment.get('start2'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end2') + '\"').to.eql(pm.environment.get('end2'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 set approve by user 4 (owner)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:02 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-04T15:16:06\",\n    \"end\": \"2023-08-05T15:16:06\"\n}"
						}
					]
				},
				{
					"name": "Booking 2 change status by user 4 (owner) after approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 2 change status by user 4 (owner) after approve",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "2"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:08 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "User 6 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"practicum@yandex.ru\"').to.eql('practicum@yandex.ru');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"practicum\"').to.eql('practicum');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"practicum\",\n    \"email\": \"practicum@yandex.ru\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User 6 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"practicum\",\n    \"email\": \"practicum@yandex.ru\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:12 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 6,\n    \"name\": \"practicum\",\n    \"email\": \"practicum@yandex.ru\"\n}"
						}
					]
				},
				{
					"name": "Booking create from user 1 to item 1 failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"var end = moment().add(3, 'd');\r",
									"pm.environment.set('start3', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end3', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start3}}\",\n    \"end\": \"{{end3}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking create from user 1 to item 1 failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start3}}\",\n    \"end\": \"{{end3}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Booking 3 create from user 4 to item 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start3') + '\"').to.eql(pm.environment.get('start3'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end3') + '\"').to.eql(pm.environment.get('end3'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"4\"').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'd');\r",
									"var end = moment().add(25, 'h');\r",
									"pm.environment.set('start3', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end3', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start3}}\",\n    \"end\": \"{{end3}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 3 create from user 4 to item 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start3}}\",\n    \"end\": \"{{end3}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 4,\n        \"name\": \"user\",\n        \"email\": \"user@user.com\"\n    },\n    \"start\": \"2023-08-04T15:17:20\",\n    \"end\": \"2023-08-04T16:17:20\"\n}"
						}
					]
				},
				{
					"name": "Booking 3 set rejected by user 1 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.ok;",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start3') + '\"').to.eql(pm.environment.get('start3'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end3') + '\"').to.eql(pm.environment.get('end3'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"4\"').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "3"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 3 set rejected by user 1 (owner)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"status\": \"REJECTED\",\n    \"item\": {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 4,\n        \"name\": \"user\",\n        \"email\": \"user@user.com\"\n    },\n    \"start\": \"2023-08-04T15:17:20\",\n    \"end\": \"2023-08-04T16:17:20\"\n}"
						}
					]
				},
				{
					"name": "Booking 4 create from user 5 to item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start4') + '\"').to.eql(pm.environment.get('start4'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end4') + '\"').to.eql(pm.environment.get('end4'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"5\"').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(1, 'h');\r",
									"var end = moment().add(2, 'h');\r",
									"pm.environment.set('start4', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end4', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start4}}\",\n    \"end\": \"{{end4}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 4 create from user 5 to item 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start4}}\",\n    \"end\": \"{{end4}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 5,\n        \"name\": \"other\",\n        \"email\": \"other@other.com\"\n    },\n    \"start\": \"2023-08-03T16:17:30\",\n    \"end\": \"2023-08-03T17:17:30\"\n}"
						}
					]
				},
				{
					"name": "Booking 4 set approve by user 4 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking get response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start4') + '\"').to.eql(pm.environment.get('start4'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end4') + '\"').to.eql(pm.environment.get('end4'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"5\"').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "4"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 4 set approve by user 4 (owner)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "4"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 5,\n        \"name\": \"other\",\n        \"email\": \"other@other.com\"\n    },\n    \"start\": \"2023-08-03T16:17:30\",\n    \"end\": \"2023-08-03T17:17:30\"\n}"
						}
					]
				},
				{
					"name": "Item 2 get by user 4 (owner) with  bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('id');",
									"    pm.expect(jsonData.lastBooking.id, '\"lastBooking.id\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item 'lastBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.lastBooking.bookerId, '\"lastBooking.bookerId\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item 'nextBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('id');",
									"    pm.expect(jsonData.nextBooking.id, '\"nextBooking.id\" must be \"1\"').to.eql(4);",
									"});",
									"pm.test(\"Test item 'nextBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.nextBooking.bookerId, '\"nextBooking.bookerId\" must be \"1\"').to.eql(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = setTimeout(function(){}, 4000);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get by user 4 (owner) with  bookings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true,\n    \"requestId\": null,\n    \"lastBooking\": {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 1,\n        \"start\": \"2023-08-03T15:16:05\",\n        \"end\": \"2023-08-03T15:16:06\"\n    },\n    \"nextBooking\": {\n        \"id\": 4,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 5,\n        \"start\": \"2023-08-03T16:17:30\",\n        \"end\": \"2023-08-03T17:17:30\"\n    },\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item 2 get by user 1 without  bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get by user 1 without  bookings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"requestId\": null,\n    \"lastBooking\": null,\n    \"nextBooking\": null,\n    \"available\": true,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item 2 get by user 5 without  bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get by user 5 without  bookings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"requestId\": null,\n    \"lastBooking\": null,\n    \"nextBooking\": null,\n    \"available\": true,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item get all user 4 with bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test item[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item[0] 'lastBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('lastBooking');",
									"    pm.expect(jsonData[0].lastBooking).to.have.property('id');",
									"    pm.expect(jsonData[0].lastBooking.id, '\"lastBooking.id\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item[0] 'lastBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('lastBooking');",
									"    pm.expect(jsonData[0].lastBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData[0].lastBooking.bookerId, '\"lastBooking.bookerId\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item[0] 'nextBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('nextBooking');",
									"    pm.expect(jsonData[0].nextBooking).to.have.property('id');",
									"    pm.expect(jsonData[0].nextBooking.id, '\"nextBooking.id\" must be \"1\"').to.eql(4);",
									"});",
									"pm.test(\"Test item[0] 'nextBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('nextBooking');",
									"    pm.expect(jsonData[0].nextBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData[0].nextBooking.bookerId, '\"nextBooking.bookerId\" must be \"1\"').to.eql(5);",
									"});",
									"",
									"",
									"pm.test(\"Test item[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test item[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									"pm.test(\"Test item[1] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('description');",
									"    pm.expect(jsonData[1].description, '\"description\" must be \"Тюбик суперклея марки Момент\"').to.eql('Тюбик суперклея марки Момент');",
									"});",
									"pm.test(\"Test item[1] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('available');",
									"    pm.expect(jsonData[1].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item[1] 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('lastBooking');",
									"    pm.expect(jsonData[1].lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item[1] 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('nextBooking');",
									"    pm.expect(jsonData[1].nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item get all user 4 with bookings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:17:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true,\n        \"lastBooking\": {\n            \"id\": 1,\n            \"status\": \"APPROVED\",\n            \"itemId\": 2,\n            \"bookerId\": 1,\n            \"start\": \"2023-08-03T15:16:05\",\n            \"end\": \"2023-08-03T15:16:06\"\n        },\n        \"nextBooking\": {\n            \"id\": 4,\n            \"status\": \"APPROVED\",\n            \"itemId\": 2,\n            \"bookerId\": 5,\n            \"start\": \"2023-08-03T16:17:30\",\n            \"end\": \"2023-08-03T17:17:30\"\n        },\n        \"comments\": []\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Клей Момент\",\n        \"description\": \"Тюбик суперклея марки Момент\",\n        \"requestId\": null,\n        \"lastBooking\": null,\n        \"nextBooking\": null,\n        \"available\": true,\n        \"comments\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Booking 5 create from user 1 to item 3 current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(3, 's');\r",
									"var end = moment().add(1, 'd')\r",
									"pm.environment.set('start5', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end5', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 3,\n    \"start\": \"{{start5}}\",\n    \"end\": \"{{end5}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 5 create from user 1 to item 3 current",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 3,\n    \"start\": \"{{start5}}\",\n    \"end\": \"{{end5}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 3,\n        \"name\": \"Клей Момент\",\n        \"description\": \"Тюбик суперклея марки Момент\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:18:06\",\n    \"end\": \"2023-08-04T15:18:03\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by WAITING state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=WAITING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "WAITING"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by WAITING state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=WAITING",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "WAITING"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:06\",\n        \"end\": \"2023-08-04T15:18:03\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 4 (owner) by WAITING state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=WAITING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "WAITING"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 4 (owner) by WAITING state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=WAITING",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "WAITING"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"WAITING\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:06\",\n        \"end\": \"2023-08-04T15:18:03\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking 6 create from user 1 to item 2 current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start6') + '\"').to.eql(pm.environment.get('start6'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end6') + '\"').to.eql(pm.environment.get('end6'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(3, 's');\r",
									"var end = moment().add(4, 's')\r",
									"pm.environment.set('start6', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end6', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start6}}\",\n    \"end\": \"{{end6}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 6 create from user 1 to item 2 current",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 2,\n    \"start\": \"{{start6}}\",\n    \"end\": \"{{end6}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 6,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:18:23\",\n    \"end\": \"2023-08-03T15:18:24\"\n}"
						}
					]
				},
				{
					"name": "Booking 5 set rejected by user 4 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 5 set rejected by user 4 (owner)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"status\": \"REJECTED\",\n    \"item\": {\n        \"id\": 3,\n        \"name\": \"Клей Момент\",\n        \"description\": \"Тюбик суперклея марки Момент\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:18:06\",\n    \"end\": \"2023-08-04T15:18:03\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by REJECTED state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=REJECTED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by REJECTED state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=REJECTED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "REJECTED"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"REJECTED\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:06\",\n        \"end\": \"2023-08-04T15:18:03\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 4 (owner) by REJECTED state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=REJECTED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 4 (owner) by REJECTED state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=REJECTED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "REJECTED"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"REJECTED\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:06\",\n        \"end\": \"2023-08-04T15:18:03\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking 6 set approve by owner 4 current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking patch response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start6') + '\"').to.eql(pm.environment.get('start6'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end6') + '\"').to.eql(pm.environment.get('end6'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "6"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 6 set approve by owner 4 current",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "6"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:18:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 6,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 2,\n        \"name\": \"Отвертка\",\n        \"description\": \"Аккумуляторная отвертка\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:18:23\",\n    \"end\": \"2023-08-03T15:18:24\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "Item 4 create by user 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Кухонный стол\"').to.eql('Кухонный стол');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Стол для празднования\"').to.eql('Стол для празднования');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "6",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Кухонный стол\",\n    \"description\": \"Стол для празднования\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Item 4 create by user 6",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "6",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Кухонный стол\",\n    \"description\": \"Стол для празднования\",\n    \"available\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:20:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Кухонный стол\",\n    \"description\": \"Стол для празднования\",\n    \"available\": true\n}"
						}
					]
				},
				{
					"name": "Item 1 get from user 1 (owner) without comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная дрель + аккумулятор\"').to.eql('Аккумуляторная дрель + аккумулятор');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 1 get from user 1 (owner) without comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:20:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Аккумуляторная дрель\",\n    \"description\": \"Аккумуляторная дрель + аккумулятор\",\n    \"available\": true,\n    \"requestId\": null,\n    \"lastBooking\": null,\n    \"nextBooking\": null,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Booking 7 future create from user 5 to item 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start7') + '\"').to.eql(pm.environment.get('start7'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end7') + '\"').to.eql(pm.environment.get('end7'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"5\"').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(10, 'd');\r",
									"var end = moment().add(11, 'd')\r",
									"pm.environment.set('start7', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end7', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start7}}\",\n    \"end\": \"{{end7}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 7 future create from user 5 to item 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 1,\n    \"start\": \"{{start7}}\",\n    \"end\": \"{{end7}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:20:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 5,\n        \"name\": \"other\",\n        \"email\": \"other@other.com\"\n    },\n    \"start\": \"2023-08-13T15:20:43\",\n    \"end\": \"2023-08-14T15:20:43\"\n}"
						}
					]
				},
				{
					"name": "Booking 8 create from user 1 to item 4 start past and end future",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start8') + '\"').to.eql(pm.environment.get('start8'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end8') + '\"').to.eql(pm.environment.get('end8'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"4\"').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Кухонный стол\"').to.eql('Кухонный стол');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 's');\r",
									"var end = moment().add(1, 'h');\r",
									"pm.environment.set('start8', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									"pm.environment.set('end8', end.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": 4,\n    \"start\": \"{{start8}}\",\n    \"end\": \"{{end8}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Booking 8 create from user 1 to item 4 start past and end future",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": 4,\n    \"start\": \"{{start8}}\",\n    \"end\": \"{{end8}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:20:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"status\": \"WAITING\",\n    \"item\": {\n        \"id\": 4,\n        \"name\": \"Кухонный стол\",\n        \"description\": \"Стол для празднования\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:20:52\",\n    \"end\": \"2023-08-03T16:20:50\"\n}"
						}
					]
				},
				{
					"name": "Booking 8 set approve by user 6 (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking get response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start8') + '\"').to.eql(pm.environment.get('start8'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end8') + '\"').to.eql(pm.environment.get('end8'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"4\"').to.eql(4);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Кухонный стол\"').to.eql('Кухонный стол');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "6",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "8"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 8 set approve by user 6 (owner)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "6",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "8"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:20:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 4,\n        \"name\": \"Кухонный стол\",\n        \"description\": \"Стол для празднования\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 1,\n        \"name\": \"updateName\",\n        \"email\": \"updateName@user.com\"\n    },\n    \"start\": \"2023-08-03T15:20:52\",\n    \"end\": \"2023-08-03T16:20:50\"\n}"
						}
					]
				},
				{
					"name": "Item 2 get from user 1 without comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									"",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get from user 1 without comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:21:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"requestId\": null,\n    \"lastBooking\": null,\n    \"nextBooking\": null,\n    \"available\": true,\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Item 2 get from user 4 (owner) without comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('id');",
									"    pm.expect(jsonData.lastBooking.id, '\"lastBooking.id\" must be \"6\"').to.eql(6);",
									"});",
									"pm.test(\"Test item 'lastBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.lastBooking.bookerId, '\"lastBooking.bookerId\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item 'nextBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('id');",
									"    pm.expect(jsonData.nextBooking.id, '\"nextBooking.id\" must be \"1\"').to.eql(4);",
									"});",
									"pm.test(\"Test item 'nextBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.nextBooking.bookerId, '\"nextBooking.bookerId\" must be \"1\"').to.eql(5);",
									"});",
									"",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get from user 4 (owner) without comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:21:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true,\n    \"lastBooking\": {\n        \"id\": 6,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 1,\n        \"start\": \"2023-08-03T15:18:23\",\n        \"end\": \"2023-08-03T15:18:24\"\n    },\n    \"nextBooking\": {\n        \"id\": 4,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 5,\n        \"start\": \"2023-08-03T16:17:30\",\n        \"end\": \"2023-08-03T17:17:30\"\n    },\n    \"comments\": []\n}"
						}
					]
				},
				{
					"name": "Comment from user 4 to item 1 without booking failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Comment for item 1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId",
								"comment"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Comment from user 4 to item 1 without booking failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Comment for item 1\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId",
										"comment"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:12 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Comment  from user 1 to item 2 empty failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId",
								"comment"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Comment  from user 1 to item 2 empty failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId",
										"comment"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:15 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"code\": \"400 BAD_REQUEST\",\n            \"error\": \"text - must not be blank\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Comment 1  from user 1 to item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Test add comment to item 2 from user1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Add comment from user1\");",
									"    pm.expect(jsonData.authorName, '\"authorName\" field').to.eql(\"updateName\");",
									"    pm.expect(jsonData.created, '\"created\" field').not.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment();\r",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Add comment from user1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId",
								"comment"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Comment 1  from user 1 to item 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Add comment from user1\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId",
										"comment"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"text\": \"Add comment from user1\",\n    \"authorName\": \"updateName\",\n    \"created\": \"2023-08-03T15:23:18.5068095\"\n}"
						}
					]
				},
				{
					"name": "Item 2 get by user 1 with comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									"",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item 'comments[0].id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('id');",
									"    pm.expect(jsonData.comments[0].id, '\"id\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item 'comments[0].text' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('text');",
									"    pm.expect(jsonData.comments[0].text, '\"text\" must be \"Add comment from user1\"').to.eql('Add comment from user1');",
									"});",
									"pm.test(\"Test item 'comments[0].authorName' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('authorName');",
									"    pm.expect(jsonData.comments[0].authorName, '\"authorName\" must be \"updateName\"').to.eql(\"updateName\");",
									"});",
									"pm.test(\"Test item 'comments[0].created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('created');",
									"    pm.expect(new Date(jsonData.comments[0].created), '\"created\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get by user 1 with comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true,\n    \"lastBooking\": null,\n    \"nextBooking\": null,\n    \"comments\": [\n        {\n            \"id\": 1,\n            \"text\": \"Add comment from user1\",\n            \"authorName\": \"updateName\",\n            \"created\": \"2023-08-03T15:23:18.50681\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Item 2 get  by user 4 (owner) with comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Аккумуляторная отвертка\"').to.eql('Аккумуляторная отвертка');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('id');",
									"    pm.expect(jsonData.lastBooking.id, '\"lastBooking.id\" must be \"6\"').to.eql(6);",
									"});",
									"pm.test(\"Test item 'lastBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.lastBooking.bookerId, '\"lastBooking.bookerId\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item 'nextBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('id');",
									"    pm.expect(jsonData.nextBooking.id, '\"nextBooking.id\" must be \"1\"').to.eql(4);",
									"});",
									"pm.test(\"Test item 'nextBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.nextBooking.bookerId, '\"nextBooking.bookerId\" must be \"1\"').to.eql(5);",
									"});",
									"",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item 'comments[0].id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('id');",
									"    pm.expect(jsonData.comments[0].id, '\"id\" must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test item 'comments[0].text' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('text');",
									"    pm.expect(jsonData.comments[0].text, '\"text\" must be \"Add comment from user1\"').to.eql('Add comment from user1');",
									"});",
									"pm.test(\"Test item 'comments[0].authorName' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('authorName');",
									"    pm.expect(jsonData.comments[0].authorName, '\"authorName\" must be \"updateName\"').to.eql(\"updateName\");",
									"});",
									"pm.test(\"Test item 'comments[0].created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.comments[0]).to.have.property('created');",
									"    pm.expect(new Date(jsonData.comments[0].created), '\"created\"  must be > \"' + pm.environment.get('currentDateTime') + '\"').to.greaterThan(new Date(pm.environment.get('currentDateTime')));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 2 get  by user 4 (owner) with comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"Отвертка\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true,\n    \"lastBooking\": {\n        \"id\": 6,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 1,\n        \"start\": \"2023-08-03T15:18:23\",\n        \"end\": \"2023-08-03T15:18:24\"\n    },\n    \"nextBooking\": {\n        \"id\": 4,\n        \"status\": \"APPROVED\",\n        \"itemId\": 2,\n        \"bookerId\": 5,\n        \"start\": \"2023-08-03T16:17:30\",\n        \"end\": \"2023-08-03T17:17:30\"\n    },\n    \"comments\": [\n        {\n            \"id\": 1,\n            \"text\": \"Add comment from user1\",\n            \"authorName\": \"updateName\",\n            \"created\": \"2023-08-03T15:23:18.50681\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Booking 7 set approve by owner future",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.environment.get('start7') + '\"').to.eql(pm.environment.get('start7'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.environment.get('end7') + '\"').to.eql(pm.environment.get('end7'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be \"5\"').to.eql(5);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be \"Аккумуляторная дрель\"').to.eql('Аккумуляторная дрель');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								":bookingId"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "bookingId",
									"value": "7"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking 7 set approve by owner future",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/:bookingId?approved=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										":bookingId"
									],
									"query": [
										{
											"key": "approved",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "bookingId",
											"value": "7"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7,\n    \"status\": \"APPROVED\",\n    \"item\": {\n        \"id\": 1,\n        \"name\": \"Аккумуляторная дрель\",\n        \"description\": \"Аккумуляторная дрель + аккумулятор\",\n        \"available\": true\n    },\n    \"booker\": {\n        \"id\": 5,\n        \"name\": \"other\",\n        \"email\": \"other@other.com\"\n    },\n    \"start\": \"2023-08-13T15:20:43\",\n    \"end\": \"2023-08-14T15:20:43\"\n}"
						}
					]
				},
				{
					"name": "Add comment to item 1 from user5 failed by future booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "5",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Add comment from user5\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/:itemId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId",
								"comment"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Add comment to item 1 from user5 failed by future booking",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "X-Sharer-User-Id",
										"value": "5",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Add comment from user5\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items/:itemId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId",
										"comment"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:31 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by CURRENT state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 8').to.eql(8);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start8') + '\"').to.eql(pm.environment.get('start8'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end8') + '\"').to.eql(pm.environment.get('end8'));",
									"});",
									"pm.test(\"Test booking[1] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"4\"').to.eql(4);",
									"});",
									"pm.test(\"Test booking[1] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Кухонный стол\"').to.eql('Кухонный стол');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=CURRENT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "CURRENT"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by CURRENT state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=CURRENT",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "CURRENT"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"REJECTED\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:54:36\",\n        \"end\": \"2023-08-04T15:54:33\"\n    },\n    {\n        \"id\": 8,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 4,\n            \"name\": \"Кухонный стол\",\n            \"description\": \"Стол для празднования\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:54:36\",\n        \"end\": \"2023-08-03T16:54:34\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 4 (owner) by CURRENT state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start5') + '\"').to.eql(pm.environment.get('start5'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end5') + '\"').to.eql(pm.environment.get('end5'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"REJECTED\"').to.eql('REJECTED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Клей Момент\"').to.eql('Клей Момент');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=CURRENT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "CURRENT"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 4 (owner) by CURRENT state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=CURRENT",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "CURRENT"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:38 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 5,\n        \"status\": \"REJECTED\",\n        \"item\": {\n            \"id\": 3,\n            \"name\": \"Клей Момент\",\n            \"description\": \"Тюбик суперклея марки Момент\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:06\",\n        \"end\": \"2023-08-04T15:18:03\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 1 by PAST state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start6') + '\"').to.eql(pm.environment.get('start6'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end6') + '\"').to.eql(pm.environment.get('end6'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?state=PAST",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "state",
									"value": "PAST"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 1 by PAST state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?state=PAST",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "state",
											"value": "PAST"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 6,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:23\",\n        \"end\": \"2023-08-03T15:18:24\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:16:05\",\n        \"end\": \"2023-08-03T15:16:06\"\n    }\n]"
						}
					]
				},
				{
					"name": "Booking get all for user 4 (owner) by PAST state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list booking response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test booking[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);",
									"});",
									"pm.test(\"Test booking[0] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('start');",
									"    pm.expect(jsonData[0].start, '\"start\"  must be \"' + pm.environment.get('start6') + '\"').to.eql(pm.environment.get('start6'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('end');",
									"    pm.expect(jsonData[0].end, '\"end\"  must be \"' + pm.environment.get('end6') + '\"').to.eql(pm.environment.get('end6'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('booker');",
									"    pm.expect(jsonData[0].booker).to.have.property('id');",
									"    pm.expect(jsonData[0].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('id');",
									"    pm.expect(jsonData[0].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('item');",
									"    pm.expect(jsonData[0].item).to.have.property('name');",
									"    pm.expect(jsonData[0].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});",
									"",
									"pm.test(\"Test booking[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test booking[1] 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('start');",
									"    pm.expect(jsonData[1].start, '\"start\"  must be \"' + pm.environment.get('start') + '\"').to.eql(pm.environment.get('start'));",
									"});",
									"pm.test(\"Test booking[0] 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('end');",
									"    pm.expect(jsonData[1].end, '\"end\"  must be \"' + pm.environment.get('end') + '\"').to.eql(pm.environment.get('end'));",
									"});",
									"pm.test(\"Test booking[0] 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking[0] 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('booker');",
									"    pm.expect(jsonData[1].booker).to.have.property('id');",
									"    pm.expect(jsonData[1].booker.id, '\"booker.id\"  must be \"1\"').to.eql(1);",
									"});",
									"pm.test(\"Test booking[0] 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('id');",
									"    pm.expect(jsonData[1].item.id, '\"item.id\"  must be \"2\"').to.eql(2);",
									"});",
									"pm.test(\"Test booking[0] 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('item');",
									"    pm.expect(jsonData[1].item).to.have.property('name');",
									"    pm.expect(jsonData[1].item.name, '\"item.name\"  must be \"Отвертка\"').to.eql('Отвертка');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?state=PAST",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "state",
									"value": "PAST"
								}
							]
						}
					},
					"response": [
						{
							"name": "Booking get all for user 4 (owner) by PAST state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?state=PAST",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "state",
											"value": "PAST"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 6,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:18:23\",\n        \"end\": \"2023-08-03T15:18:24\"\n    },\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-03T15:16:05\",\n        \"end\": \"2023-08-03T15:16:06\"\n    }\n]"
						}
					]
				},
				{
					"name": "Item 6 get  by user 4 (owner) without comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Кухонный стол\"').to.eql('Кухонный стол');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Стол для празднования\"').to.eql('Стол для празднования');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"",
									"pm.test(\"Test item 'lastBooking.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('id');",
									"    pm.expect(jsonData.lastBooking.id, '\"lastBooking.id\" must be \"8\"').to.eql(8);",
									"});",
									"pm.test(\"Test item 'lastBooking.bookerId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking).to.have.property('bookerId');",
									"    pm.expect(jsonData.lastBooking.bookerId, '\"lastBooking.bookerId\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item 'nextBooking'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "6",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "4"
								}
							]
						}
					},
					"response": [
						{
							"name": "Item 6 get  by user 4 (owner) without comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "6",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/items/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "4"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 03 Aug 2023 08:23:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Кухонный стол\",\n    \"description\": \"Стол для празднования\",\n    \"available\": true,\n    \"lastBooking\": {\n        \"id\": 8,\n        \"status\": \"APPROVED\",\n        \"itemId\": 4,\n        \"bookerId\": 1,\n        \"start\": \"2023-08-03T15:20:52\",\n        \"end\": \"2023-08-03T16:20:50\"\n    },\n    \"nextBooking\": null,\n    \"comments\": []\n}"
						}
					]
				}
			]
		},
		{
			"name": "item requests",
			"item": [
				{
					"name": "Add item request with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,404,403]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "99",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Add item request with wrong user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "99",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 13:26:26 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Add item request with empty description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Add item request with empty description",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 13:26:30 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"description is marked non-null but is null\"\n}"
						}
					]
				},
				{
					"name": "Requests get own by wrong user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,404,403]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "99",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Requests get own by wrong user id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "99",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"User not found\"\n}"
						}
					]
				},
				{
					"name": "Requests get own by user id without requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Requests get own by user id without requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:22 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Requests get all without pagination params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							]
						}
					},
					"response": [
						{
							"name": "Requests get all without pagination params",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Requests get all with from = 0 & size = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=0&size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = 0 & size = 0",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=0&size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "0"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:29 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Requests get all with from = -1 & size = 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=-1&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = -1 & size = 20",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=-1&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:31 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Requests get all with from = 0 & size = -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=0&size=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = 0 & size = -1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=0&size=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:33 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Requests get all with from = 0 & size = 20 when empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=0&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = 0 & size = 20 when empty",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 09:55:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Add item request 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item request create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item request 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData.created, '\"created\" must be not null').is.not.null;",
									"",
									"    var current = pm.environment.get('currentDateTime');",
									"    var created = new Date(jsonData.created);",
									"    var future = new Date(current);",
									"    future.setSeconds(future.getSeconds() + 2);",
									"    pm.expect(created, '\"created\" must be > ' + pm.environment.get('currentDateTime')).to.gte(new Date(current));",
									"    pm.expect(created, '\"created\"  must be < ' + future).to.lte(future);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Add item request 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:57:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n    \"created\": \"2023-08-16T16:57:42.4470325\"\n}"
						}
					]
				},
				{
					"name": "Requests get own by user id with requests empty items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item request[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request[0] 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('created');",
									"    pm.expect(jsonData[0].created, '\"created\" must be not null').is.not.null;",
									"});",
									"pm.test(\"Test item request[0] 'items' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('items');",
									"    pm.expect(jsonData[0].items, '\"items\" must be not null').is.not.null;",
									"    pm.expect(jsonData[0].items.length, 'items count in total').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Requests get own by user id with requests empty items",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:57:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n        \"items\": [],\n        \"created\": \"2023-08-16T16:57:42.447033\"\n    }\n]"
						}
					]
				},
				{
					"name": "Add item 5 to request 1 from user 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Щётка для обуви\"').to.eql('Щётка для обуви');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Стандартная щётка для обуви\"').to.eql('Стандартная щётка для обуви');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test item 'requestId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('requestId');",
									"    pm.expect(jsonData.requestId, '\"requestId\" must be \"1\"').to.eq(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Щётка для обуви\",\n    \"description\": \"Стандартная щётка для обуви\",\n    \"available\": true,\n    \"requestId\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Add item 5 to request 1 from user 4",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Щётка для обуви\",\n    \"description\": \"Стандартная щётка для обуви\",\n    \"available\": true,\n    \"requestId\": 1\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:57:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"name\": \"Щётка для обуви\",\n    \"description\": \"Стандартная щётка для обуви\",\n    \"available\": true,\n    \"requestId\": 1\n}"
						}
					]
				},
				{
					"name": "Requests get own by user id with requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item request[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request[0] 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('created');",
									"    pm.expect(jsonData[0].created, '\"created\" must be not null').is.not.null;",
									"    ",
									"    var created = new Date(jsonData[0].created);",
									"    var future = new Date(pm.environment.get('currentDateTime'));",
									"    pm.expect(created, '\"created\"  must be < ' + pm.environment.get('currentDateTime')).to.lte(future);",
									"});",
									"pm.test(\"Test item request[0] 'items' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('items');",
									"    pm.expect(jsonData[0].items, '\"items\" must be not null').is.not.null;",
									"    pm.expect(jsonData[0].items.length, 'items count must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test request[0].items[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].items[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test request[0].items[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].items[0].name, '\"name\" must be \"Щётка для обуви\"').to.eql('Щётка для обуви');",
									"});",
									"pm.test(\"Test request[0].items[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].items[0].description, '\"description\" must be \"Стандартная щётка для обуви\"').to.eql('Стандартная щётка для обуви');",
									"});",
									"pm.test(\"Test request[0].items[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].items[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test request[0].items[0] 'requestId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('requestId');",
									"    pm.expect(jsonData[0].items[0].requestId, '\"requestId\" must be \"1\"').to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss.sss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests"
							]
						}
					},
					"response": [
						{
							"name": "Requests get own by user id with requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:57:59 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n        \"items\": [\n            {\n                \"id\": 5,\n                \"name\": \"Щётка для обуви\",\n                \"description\": \"Стандартная щётка для обуви\",\n                \"available\": true,\n                \"requestId\": 1\n            }\n        ],\n        \"created\": \"2023-08-16T16:57:42.447033\"\n    }\n]"
						}
					]
				},
				{
					"name": "Requests get all with from = 0 & size = 20 for request owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=0&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = 0 & size = 20 for request owner",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:58:12 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Requests get all with from = 0 & size = 20 for other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item requests response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test item request[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request[0] 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('created');",
									"    pm.expect(jsonData[0].created, '\"created\" must be not null').is.not.null;",
									"    ",
									"    var created = new Date(jsonData[0].created);",
									"    var future = new Date(pm.environment.get('currentDateTime'));",
									"    pm.expect(created, '\"created\"  must be < ' + pm.environment.get('currentDateTime')).to.lte(future);",
									"});",
									"pm.test(\"Test item request[0] 'items' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('items');",
									"    pm.expect(jsonData[0].items, '\"items\" must be not null').is.not.null;",
									"    pm.expect(jsonData[0].items.length, 'items count must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test request[0].items[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].items[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test request[0].items[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].items[0].name, '\"name\" must be \"Щётка для обуви\"').to.eql('Щётка для обуви');",
									"});",
									"pm.test(\"Test request[0].items[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].items[0].description, '\"description\" must be \"Стандартная щётка для обуви\"').to.eql('Стандартная щётка для обуви');",
									"});",
									"pm.test(\"Test request[0].items[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('available');",
									"    pm.expect(jsonData[0].items[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test request[0].items[0] 'requestId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].items[0]).to.have.property('requestId');",
									"    pm.expect(jsonData[0].items[0].requestId, '\"requestId\" must be \"1\"').to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss.sss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/all?from=0&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"all"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Requests get all with from = 0 & size = 20 for other user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/all?from=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"all"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:58:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n        \"items\": [\n            {\n                \"id\": 5,\n                \"name\": \"Щётка для обуви\",\n                \"description\": \"Стандартная щётка для обуви\",\n                \"available\": true,\n                \"requestId\": 1\n            }\n        ],\n        \"created\": \"2023-08-16T16:57:42.447033\"\n    }\n]"
						}
					]
				},
				{
					"name": "Requests get by id for wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404, 403]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "99",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Requests get by id for wrong user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "99",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"1"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:58:26 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Item request not found\"\n}"
						}
					]
				},
				{
					"name": "Requests get by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/99",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"99"
							]
						}
					},
					"response": [
						{
							"name": "Requests get by wrong id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/99",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"99"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:58:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"404 NOT_FOUND\",\n    \"error\": \"Item request not found\"\n}"
						}
					]
				},
				{
					"name": "Requests get by id for other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test item request response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test item request 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData.created, '\"created\" must be not null').is.not.null;",
									"",
									"    var created = new Date(jsonData.created);",
									"    var future = new Date(pm.environment.get('currentDateTime'));",
									"    pm.expect(created, '\"created\"  must be < ' + pm.environment.get('currentDateTime')).to.lte(future);",
									"});",
									"pm.test(\"Test item request 'items' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData.items, '\"items\" must be not null').is.not.null;",
									"    pm.expect(jsonData.items.length, 'items count must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test request.items[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('id');",
									"    pm.expect(jsonData.items[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test request.items[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('name');",
									"    pm.expect(jsonData.items[0].name, '\"name\" must be \"Щётка для обуви\"').to.eql('Щётка для обуви');",
									"});",
									"pm.test(\"Test request.items[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('description');",
									"    pm.expect(jsonData.items[0].description, '\"description\" must be \"Стандартная щётка для обуви\"').to.eql('Стандартная щётка для обуви');",
									"});",
									"pm.test(\"Test request.items[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('available');",
									"    pm.expect(jsonData.items[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test request.items[0] 'requestId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('requestId');",
									"    pm.expect(jsonData.items[0].requestId, '\"requestId\" must be \"1\"').to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment();\r",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss.sss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "4",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Requests get by id for other user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "4",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:58:57 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n    \"items\": [\n        {\n            \"id\": 5,\n            \"name\": \"Щётка для обуви\",\n            \"description\": \"Стандартная щётка для обуви\",\n            \"available\": true,\n            \"requestId\": 1\n        }\n    ],\n    \"created\": \"2023-08-16T16:57:42.447033\"\n}"
						}
					]
				},
				{
					"name": "Requests get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test item request response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test item request 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test item request 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData.description, '\"description\" must be \"Хотел бы воспользоваться щёткой для обуви\"').to.eql(\"Хотел бы воспользоваться щёткой для обуви\");",
									"});",
									"pm.test(\"Test item request 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData.created, '\"created\" must be not null').is.not.null;",
									"",
									"    var created = new Date(jsonData.created);",
									"    var future = new Date(pm.environment.get('currentDateTime'));",
									"    pm.expect(created, '\"created\"  must be < ' + pm.environment.get('currentDateTime')).to.lte(future);",
									"});",
									"pm.test(\"Test item request 'items' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData.items, '\"items\" must be not null').is.not.null;",
									"    pm.expect(jsonData.items.length, 'items count must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test request.items[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('id');",
									"    pm.expect(jsonData.items[0].id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test request.items[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('name');",
									"    pm.expect(jsonData.items[0].name, '\"name\" must be \"Щётка для обуви\"').to.eql('Щётка для обуви');",
									"});",
									"pm.test(\"Test request.items[0] 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('description');",
									"    pm.expect(jsonData.items[0].description, '\"description\" must be \"Стандартная щётка для обуви\"').to.eql('Стандартная щётка для обуви');",
									"});",
									"pm.test(\"Test request.items[0] 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('available');",
									"    pm.expect(jsonData.items[0].available, '\"available\" must be \"true\"').to.true;",
									"});",
									"pm.test(\"Test request.items[0] 'requestId' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items[0]).to.have.property('requestId');",
									"    pm.expect(jsonData.items[0].requestId, '\"requestId\" must be \"1\"').to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"var start = moment();",
									"pm.environment.set('currentDateTime', start.format('YYYY-MM-DDTHH:mm:ss.sss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/requests/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"requests",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Requests get by id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/requests/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"requests",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"description\": \"Хотел бы воспользоваться щёткой для обуви\",\n    \"items\": [\n        {\n            \"id\": 5,\n            \"name\": \"Щётка для обуви\",\n            \"description\": \"Стандартная щётка для обуви\",\n            \"available\": true,\n            \"requestId\": 1\n        }\n    ],\n    \"created\": \"2023-08-16T16:57:42.447033\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Pagination",
			"item": [
				{
					"name": "Bookings get all with from = 0 & size = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?from=0&size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings get all with from = 0 & size = 0",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?from=0&size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "0"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:12 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings owner get all with from = 0 & size = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?from=0&size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings owner get all with from = 0 & size = 0",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?from=0&size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "0"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:19 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings get all with from = -1 & size = 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?from=-1&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings get all with from = -1 & size = 20",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?from=-1&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:24 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings owner get all with from = -1 & size = 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?from=-1&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings owner get all with from = -1 & size = 20",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?from=-1&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:30 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings get all with from = 0 & size = -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?from=0&size=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings get all with from = 0 & size = -1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?from=0&size=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:38 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings owner get all with from = 0 & size = -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?from=0&size=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings owner get all with from = 0 & size = -1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?from=0&size=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:43 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"400 BAD_REQUEST\",\n    \"error\": \"Error request\"\n}"
						}
					]
				},
				{
					"name": "Bookings get all with from = 4 & size = 2 when all=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Test get all bookings\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'bookings count in total').to.eql(1);",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings?from=4&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							],
							"query": [
								{
									"key": "from",
									"value": "4"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings get all with from = 4 & size = 2 when all=5",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings?from=4&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									],
									"query": [
										{
											"key": "from",
											"value": "4"
										},
										{
											"key": "size",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"status\": \"APPROVED\",\n        \"item\": {\n            \"id\": 2,\n            \"name\": \"Отвертка\",\n            \"description\": \"Аккумуляторная отвертка\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 1,\n            \"name\": \"updateName\",\n            \"email\": \"updateName@user.com\"\n        },\n        \"start\": \"2023-08-16T16:57:24\",\n        \"end\": \"2023-08-16T16:57:25\"\n    }\n]"
						}
					]
				},
				{
					"name": "Bookings owner get all with from = 1 & size = 1 when all=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Test get all owner bookings\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'owner bookings count in total').to.eql(1);",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner?from=1&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							],
							"query": [
								{
									"key": "from",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bookings owner get all with from = 1 & size = 1 when all=2",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Sharer-User-Id",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/owner?from=1&size=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"owner"
									],
									"query": [
										{
											"key": "from",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Aug 2023 09:59:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"status\": \"REJECTED\",\n        \"item\": {\n            \"id\": 1,\n            \"name\": \"Аккумуляторная дрель\",\n            \"description\": \"Аккумуляторная дрель + аккумулятор\",\n            \"available\": true\n        },\n        \"booker\": {\n            \"id\": 4,\n            \"name\": \"user\",\n            \"email\": \"user@user.com\"\n        },\n        \"start\": \"2023-08-17T16:57:23\",\n        \"end\": \"2023-08-17T17:57:23\"\n    }\n]"
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}